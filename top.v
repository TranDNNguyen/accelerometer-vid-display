//=======================================================
// top.v
//
// This code is generated by Terasic System Builder
// and modified by M. Hildebrand and B. Baas
//
// 2018/02/05 First version
//=======================================================

module top (
    //////////// CLOCK //////////
    input               ADC_CLK_10,
    input               MAX10_CLK1_50,
    input               MAX10_CLK2_50,

    //////////// SEG7 //////////
    output     [7:0]    HEX0,
    output     [7:0]    HEX1,
    output     [7:0]    HEX2,
    output     [7:0]    HEX3,
    output     [7:0]    HEX4,
    output     [7:0]    HEX5,

    //////////// KEY //////////
    input      [1:0]    KEY,

    //////////// LED //////////
    output     [9:0]    LEDR,

    //////////// SW //////////
    input      [9:0]    SW,

    //////////// VGA //////////
    output reg [3:0]    VGA_R,
    output reg [3:0]    VGA_G,
    output reg [3:0]    VGA_B,
    output reg          VGA_HS,
    output reg          VGA_VS,
	 
	 //////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO
);


//=======================================================
//  reg and wire declarations
//=======================================================
// Signals for drawing to the display. 
wire [3:0]     red, green, blue;
wire [31:0]    row, col;

// Timing signals - don't touch these.
wire           h_sync, v_sync;
reg				r_v_sync;
wire           disp_ena;
wire           vga_clk;
wire				clk;
wire				spi_clk;
wire				spi_clk_out;
wire				data_update;
reg				r_data_update;
wire 	[15:0] data_x, data_y;
reg	[15:0] r_data_x, r_data_y;
wire	[15:0] smooth_x, smooth_y;
reg	[15:0] r_smooth_x, r_smooth_y;
wire	[9:0] pixel_x;
reg	[9:0] r_pixel_x;
wire	[8:0] pixel_y;
reg	[8:0] r_pixel_y;


spi_control spi_Con(
	.reset_n(KEY[0]),
   .clk(clk),
   .spi_clk(spi_clk), 
	.spi_clk_out(spi_clk_out),
   .data_update(data_update),
	.data_x(data_x),
	.data_y(data_y),
   .SPI_SDI(GSENSOR_SDI),
   .SPI_SDO(GSENSOR_SDO),
   .SPI_CSN(GSENSOR_CS_N),
   .SPI_CLK(GSENSOR_SCLK)
);

always@(posedge clk) begin
	r_data_x <= data_x;
	r_data_y <= data_y;
	r_v_sync <= v_sync;
	r_data_update <= data_update;
end

smoothing Smoothing(
	.clk(clk),
	.SW(SW),
	.data_x(r_data_x),
	.data_y(r_data_y),
	.v_sync(r_v_sync),
	.LEDR(LEDR),
	.data_update(r_data_update),
	.out_x(smooth_x),
	.out_y(smooth_y)
);

always@(posedge clk) begin
	r_smooth_x = smooth_x;
	r_smooth_y = smooth_y;
end


comb_ckt_generator comb_ckt (
	.clk(clk),
   .col   (col[9:0]),   // only bottom 10 bits needed
   .row   (row[8:0]),   // only bottom 9 bits needed
	.smooth_x(r_smooth_x),
	.smooth_y(r_smooth_y),
   .red   (red),        // 4-bit color output
   .green (green),      // 4-bit color output
   .blue  (blue),       // 4-bit color output
   .SW    (SW)          // ten switch outputs used in module
   );

	

//==============================================================
// Below is display related stuff. Modify if you like.
//==============================================================

// This block sets the 10 LEDs.
// They are set to light depending on the position of the adjacent 10 switches.

// This block sets the 7-segment HEX displays.
// They are set to all dark.
assign HEX0 = 8'b1111_1111;
assign HEX1 = 8'b1111_1111;
assign HEX2 = 8'b1111_1111;
assign HEX3 = 8'b1111_1111;
assign HEX4 = 8'b1111_1111;
assign HEX5 = 8'b1111_1111;


//==============================================================
// Below is display-related and PLL stuff. Don't touch it!
//==============================================================

// Register VGA output signals for timing purposes
always @(posedge clk) begin
   if (disp_ena == 1'b1) begin
      VGA_R <= red;
      VGA_B <= blue;
      VGA_G <= green;
   end else begin
      VGA_R <= 4'd0;
      VGA_B <= 4'd0;
      VGA_G <= 4'd0;
   end
   VGA_HS <= h_sync;
   VGA_VS <= v_sync;
end

// Instantiate PLL to convert the 50 MHz clock to a 25 MHz clock for timing.
pll	pll_inst (
	.inclk0 ( MAX10_CLK1_50 ),
	.c0 ( clk ),
	.c1 ( spi_clk ),
	.c2 ( spi_clk_out )
	);
	
pll vgapll_inst (
    .inclk0    ( MAX10_CLK1_50 ),
    .c0        ( vga_clk )
    );

// Instantite VGA controller
vga_controller control(
   .pixel_clk  (vga_clk),
   .reset_n    (KEY[0]),
   .h_sync     (h_sync),
   .v_sync     (v_sync),
   .disp_ena   (disp_ena),
   .column     (col),
   .row        (row)
   );

endmodule
